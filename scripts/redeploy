#!/usr/bin/env python3

import boto3
import os, sys, subprocess, json, time, tempfile
from os.path import normpath, join, dirname, abspath

from ami import get_ami
import config

# "redeploy" or "provision"
action = os.path.basename(__file__)

if len(sys.argv) != 4:
    print('Usage: {} aws-profile private-key-file deployment-name'.format(action))
    sys.exit(1)


# AWS profile and private key file to use, plus deployment name.

aws_profile = sys.argv[1]
private_key_file = sys.argv[2]
deployment_name = sys.argv[3]


# Make sure profile works and look up region from profile.

try:
    aws = boto3.session.Session(profile_name=aws_profile)
except:
    print('FAILED TO CREATE AWS SESSION USING PROFILE "' + aws_profile + '"')
    sys.exit(1)
aws_region = aws._session.get_config_variable('region')


# Open and read deployment configuration file.

config.set_session(aws)
config.set(deployment_name)
if not config.exists():
    print('Deployment "{}" does not exist!'.format(deployment_name))
    sys.exit(1)
config.read()
config.vals['aws_region'] = aws_region


# Get AWS user ID.

try:
    iam = aws.client('iam')
    aws_uid = iam.get_user()['User']['Arn'].split(':')[4]
except Exception as e:
    print('\nFAILED TO GET CURRENT AMAZON USER ID!\n')
    print(e)
    print()
    sys.exit(1)


# Check that CloudFormation stack already exists.

cfn = aws.client('cloudformation')
try:
    stacks = cfn.list_stacks()['StackSummaries']
    stack_names = [s['StackName'] for s in stacks
                   if s['StackStatus'] != 'DELETE_COMPLETE']
except:
    print('Failed to list CloudFormation stacks!')
    sys.exit(1)
stack_name = deployment_name + '-stack'
if stack_name not in stack_names:
    print('CloudFormation stack for deployment "{}" does not exist!'.
          format(deployment_name))
    sys.exit(1)


# Set up Ansible provisioning command parameters.

if action == 'redeploy':
    playbook = 'redeploy'
else:
    playbook = 'deploy'

work_dir = normpath(join(dirname(abspath(__file__)),
                         '../playbooks/{}/provision'.format(playbook)))
extra_vars = [('apache_main_url',    config.vals['apache_main_url']),
              ('apache_survey_url',  config.vals['apache_survey_url']),
              ('api_rollbar_key',    config.vals['api_rollbar_key']),
              ('api_use_rollbar',    config.vals['api_use_rollbar']),
              ('aws_region',         config.vals['aws_region']),
              ('ckan_app_secret',    config.vals['ckan_app_secret']),
              ('ckan_app_uuid',      config.vals['ckan_app_uuid']),
              ('ckan_main_url',      config.vals['ckan_main_url']),
              ('db_host',            config.vals['db_host']),
              ('db_password',        config.vals['db_password']),
              ('deployment_name',    config.vals['deployment_name']),
              ('ona_app_secret',     config.vals['ona_app_secret']),
              ('ona_domain_name',    config.vals['ona_domain_name']),
              ('ona_survey_url',     config.vals['ona_survey_url']),
              ('ona_admin_password', config.vals['ona_admin_password']),
              ('s3_bucket',          config.vals['s3_bucket']),
              ('server_ip',          config.vals['server_ip'])]
extra_vars = ' '.join(map(lambda p: p[0] + '=' + p[1], extra_vars))


# Set up temporary hosts file for Ansible.

tmp_hosts = tempfile.mkstemp()[1]
with open(tmp_hosts, 'w') as tmp_fp:
    print(config.vals['public_ip'], file=tmp_fp)


# Run provisioning playbook.

os.chdir(work_dir)
os.environ['ANSIBLE_HOST_KEY_CHECKING'] = 'false'
cmd = ['ansible-playbook',
       '--private-key=' + private_key_file,
       '--inventory-file=' + tmp_hosts,
       '--extra-vars', extra_vars,
       '{}.yml'.format(playbook)]
if subprocess.call(cmd) != 0:
    print('\n\nansible-playbook TERMINATED INCORRECTLY!\n\n')
else:
    print('\n\nPROVISIONING COMPLETED!\n\n')
    print('See deployments/{}.json file for details\n'.
          format(config.vals['deployment_name']))
os.remove(tmp_hosts)
